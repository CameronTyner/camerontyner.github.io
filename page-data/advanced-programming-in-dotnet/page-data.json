{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/advanced-programming-in-dotnet/","result":{"data":{"markdownRemark":{"html":"<p>A 5th semester course covering advanced topics in .NET development as a followup to the 3rd semester course. The course\nwas challenged due to a change in instructor as well as COVID-19 closing the school (classes were continued online). A\n5th assignment covering design patterns was planned but was dropped to a COVID-19 accommodation plan. There was a group\ncomponent, assignment 3 was done in small teams. Unit tests were required on all assignments. I received a grade of 99%\noverall in the course.</p>\n<p>The following topics were covered:</p>\n<ul>\n<li>Week 1 - Intro</li>\n<li>Week 2 - LINQ and Lambda</li>\n<li>Week 3 - Expression Trees</li>\n<li>Week 4 - Reflection</li>\n<li>Week 5 - Attributes and Serialization</li>\n<li>Week 6 - Asynchronous Programming Part 1</li>\n<li>Week 7 - Asynchronous Programming Part 2</li>\n<li>Week 8 - HTTP Applications</li>\n<li>Week 9 - WebSockets</li>\n<li>Week 10 - Multithreading</li>\n<li>Week 11 - Design Patterns Part 1</li>\n<li>Week 12 - Design Patterns Part 2</li>\n<li>Week 13 - Design Principles</li>\n<li>Week 14 - Final exam (worth 25% of the grade)</li>\n</ul>\n<p>The following assignments were given, worth 75% of the grade:</p>\n<ul>\n<li>Assignment 1 – Expression Trees</li>\n<li>Assignment 2 – Serialization Class Library</li>\n<li>Assignment 3 – Server Application</li>\n<li>Assignment 4 – Realtime Chatroom</li>\n</ul>","frontmatter":{"date":"April, 2020","slug":"advanced-programming-in-dotnet","title":"Advanced Programming in .NET","images":[{"src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/014073285d975a8cf7865f3f2ef071d4/1a705/a4-chatroom.png","srcSet":"/static/014073285d975a8cf7865f3f2ef071d4/dca4c/a4-chatroom.png 124w,\n/static/014073285d975a8cf7865f3f2ef071d4/627f1/a4-chatroom.png 249w,\n/static/014073285d975a8cf7865f3f2ef071d4/1a705/a4-chatroom.png 497w","sizes":"(min-width: 497px) 497px, 100vw"},"sources":[{"srcSet":"/static/014073285d975a8cf7865f3f2ef071d4/bab04/a4-chatroom.webp 124w,\n/static/014073285d975a8cf7865f3f2ef071d4/22e6f/a4-chatroom.webp 249w,\n/static/014073285d975a8cf7865f3f2ef071d4/71a63/a4-chatroom.webp 497w","type":"image/webp","sizes":"(min-width: 497px) 497px, 100vw"}]},"width":497,"height":750}}},"caption":"A real-time chat application using ASP.NET, SignalR (Websockets), and SQL Server. Asynchronous calls are utilized. Web images and links are supported. (Assignment 4)"},{"src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/4caf0e610c75b17b5179842f2a541402/bf66b/a1-reverse-polish-notation.png","srcSet":"/static/4caf0e610c75b17b5179842f2a541402/3fa89/a1-reverse-polish-notation.png 125w,\n/static/4caf0e610c75b17b5179842f2a541402/629ec/a1-reverse-polish-notation.png 250w,\n/static/4caf0e610c75b17b5179842f2a541402/bf66b/a1-reverse-polish-notation.png 499w","sizes":"(min-width: 499px) 499px, 100vw"},"sources":[{"srcSet":"/static/4caf0e610c75b17b5179842f2a541402/621bc/a1-reverse-polish-notation.webp 125w,\n/static/4caf0e610c75b17b5179842f2a541402/4220e/a1-reverse-polish-notation.webp 250w,\n/static/4caf0e610c75b17b5179842f2a541402/1cda7/a1-reverse-polish-notation.webp 499w","type":"image/webp","sizes":"(min-width: 499px) 499px, 100vw"}]},"width":499,"height":342}}},"caption":"Happy path use cases for a Reverse Polish notation (postfix notation) calculator console application. It uses a stack to create an expression tree to be evaluated.(Assignment 1)"},{"src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/8ef19160578fb1bb0b7bfe9732ef129f/c307d/a2-serialization.png","srcSet":"/static/8ef19160578fb1bb0b7bfe9732ef129f/0f9e5/a2-serialization.png 328w,\n/static/8ef19160578fb1bb0b7bfe9732ef129f/02969/a2-serialization.png 656w,\n/static/8ef19160578fb1bb0b7bfe9732ef129f/c307d/a2-serialization.png 1311w","sizes":"(min-width: 1311px) 1311px, 100vw"},"sources":[{"srcSet":"/static/8ef19160578fb1bb0b7bfe9732ef129f/0dde0/a2-serialization.webp 328w,\n/static/8ef19160578fb1bb0b7bfe9732ef129f/4510e/a2-serialization.webp 656w,\n/static/8ef19160578fb1bb0b7bfe9732ef129f/77dbf/a2-serialization.webp 1311w","type":"image/webp","sizes":"(min-width: 1311px) 1311px, 100vw"}]},"width":1311,"height":429}}},"caption":"Example file output from a JSON/XML serialization class library. (Assignment 2)"},{"src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/611270fc101e578b0be06005b9f321bf/7104c/a3-rest-api.png","srcSet":"/static/611270fc101e578b0be06005b9f321bf/e3fe2/a3-rest-api.png 96w,\n/static/611270fc101e578b0be06005b9f321bf/12b32/a3-rest-api.png 191w,\n/static/611270fc101e578b0be06005b9f321bf/7104c/a3-rest-api.png 382w","sizes":"(min-width: 382px) 382px, 100vw"},"sources":[{"srcSet":"/static/611270fc101e578b0be06005b9f321bf/8ef24/a3-rest-api.webp 96w,\n/static/611270fc101e578b0be06005b9f321bf/f3173/a3-rest-api.webp 191w,\n/static/611270fc101e578b0be06005b9f321bf/0a3be/a3-rest-api.webp 382w","type":"image/webp","sizes":"(min-width: 382px) 382px, 100vw"}]},"width":382,"height":381}}},"caption":"A headless server for tracking health data using a RESTful API. A sample of the patient GET operation is shown. Appropriate HTTP status codes are returned. All operations are asynchronous using the Task-based Asynchronous Pattern (TAP). Validation errors are logged to a database. (Assignment 3)"}],"technologies":[".NET Core 2.1","C# 7.3",".NET Standard 2.0","ASP.NET Core","SignalR/Websockets","SQL Server","RESTful APIs","xUnit"]}}},"pageContext":{"id":"7d61d4e5-35a2-5b2e-a7af-ff4ee2b70b2c","frontmatter__slug":"advanced-programming-in-dotnet","__params":{"frontmatter__slug":"advanced-programming-in-dotnet"}}},"staticQueryHashes":["3159585216"]}